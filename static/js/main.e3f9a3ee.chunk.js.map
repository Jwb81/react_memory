{"version":3,"sources":["characters.js","components/GamePiece/GamePiece.js","components/GameBoard/GameBoard.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","name","clicked","url","GamePiece","props","backgroundStyle","backgroundImage","concat","character","backgroundSize","react_default","a","createElement","className","style","onClick","handleCardClick","GameBoard","characters","map","char","index","components_GamePiece_GamePiece","key","Header","message","currentScore","topScore","App","state","current_score","top_score","max_score","length","character_array","selected","_this","gameBoard","document","getElementsByClassName","cards","Array","from","forEach","card","classList","remove","alreadyClicked","filter","val","shuffle","setState","add","temporaryValue","randomIndex","array","currentIndex","Math","floor","random","components_Header_Header","this","components_GameBoard_GameBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3f9a3ee.chunk.js","sourcesContent":["module.exports = [\r\n    {\r\n        name: 'beth',\r\n        clicked: false,\r\n        url: './images/beth.png'\r\n    },\r\n    {\r\n        name: 'birdperson',\r\n        clicked: false,\r\n        url: './images/birdperson.png'\r\n    },\r\n    {\r\n        name: 'evilmorty',\r\n        clicked: false,\r\n        url: './images/evilmorty.png'\r\n    },\r\n    {\r\n        name: 'gianthead',\r\n        clicked: false,\r\n        url: './images/gianthead.png'\r\n    },\r\n    {\r\n        name: 'goldenford',\r\n        clicked: false,\r\n        url: './images/goldenford.png'\r\n    },\r\n    {\r\n        name: 'jerry',\r\n        clicked: false,\r\n        url: './images/jerry.png'\r\n    },\r\n    {\r\n        name: 'jessica',\r\n        clicked: false,\r\n        url: './images/jessica.png'\r\n    },\r\n    {\r\n        name: 'meeseeks',\r\n        clicked: false,\r\n        url: './images/meeseeks.png'\r\n    },\r\n    {\r\n        name: 'morty',\r\n        clicked: false,\r\n        url: './images/morty.png'\r\n    },\r\n    {\r\n        name: 'mr',\r\n        clicked: false,\r\n        url: './images/mr.png'\r\n    },\r\n    {\r\n        name: 'rick',\r\n        clicked: false,\r\n        url: './images/rick.png'\r\n    },\r\n    {\r\n        name: 'summer',\r\n        clicked: false,\r\n        url: './images/summer.png'\r\n    }\r\n]","import React from 'react';\r\nimport './GamePiece.css';\r\n\r\n\r\nconst GamePiece = props => {\r\n    const backgroundStyle = {\r\n        backgroundImage: `url(${props.character.url})`,\r\n        backgroundSize: 'cover'\r\n    }\r\n    \r\n    return (\r\n        <div \r\n        className='gamepiece'\r\n        style={backgroundStyle}\r\n        onClick={ () => props.handleCardClick(props.character.name) }    \r\n        >\r\n            {/* <img src={ props.character.url } alt={ props.character.name }></img> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePiece;","import React from 'react';\r\nimport GamePiece from '../GamePiece/GamePiece';\r\nimport './GameBoard.css'\r\n\r\nfunction GameBoard (props) {\r\n\r\n    \r\n    return (\r\n        // <div>\r\n            <div className='gameboard'>\r\n                {props.characters.map((char, index) => {\r\n                    return <GamePiece character={char} key={ index } handleCardClick={ props.handleCardClick }/>\r\n                })}\r\n            </div>\r\n\r\n        // </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GameBoard;","import React from 'react';\nimport './Header.css'\n\nconst Header = props => {\n    \n    return (\n        <div className='navbar'>\n            <ul>\n                {/* logo */}\n                <li className='brand'>React Memorization</li>\n\n                {/* title */}\n                <li>{ props.message ? props.message : 'Click on any image to begin!' }</li>\n\n                {/* scores */}\n                <li>Score: { props.currentScore } | Top Score: { props.topScore }</li>\n            </ul>\n        </div>\n    )\n}\n\n\nexport default Header;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport GameBoard from './components/GameBoard/GameBoard';\nimport Header from './components/Header/Header'\n\nimport characters from './characters';\n\nclass App extends Component {\n  state = {\n    current_score: 0,\n    top_score: 0,\n    max_score: characters.length,\n    character_array: characters,\n    selected: [],\n  }\n\n  handleCardClick = (name) => {\n    let currentScore = this.state.current_score;\n    const topScore = this.state.top_score;\n    const gameBoard = document.getElementsByClassName('gameboard')[0];\n    \n    // get each gamepiece and remove the shake animation class\n    const cards = Array.from(document.getElementsByClassName('gamepiece'));\n    cards.forEach(card => card.classList.remove('shake'));\n\n    gameBoard.classList.remove('win-game');\n    \n    const alreadyClicked = this.state.selected.filter(val => val === name).length;\n\n    // shuffle the cards\n    this.shuffle();\n\n\n    // if the name is found, then reset state\n    if (alreadyClicked) {\n      this.setState({\n        current_score: 0,\n        selected: [],\n      });\n\n      // add the shake animation to each gamepiece\n      cards.forEach(card => card.classList.add('shake'));\n\n      return;\n    }\n\n    // add one since current score is used if a card that has never been selected is clickec\n    currentScore++;\n    \n    if (currentScore > topScore) {\n      this.setState({\n        top_score: currentScore\n      });\n    }\n    \n    this.setState({\n      selected: this.state.selected.concat(name),\n      current_score: currentScore\n    });\n\n    // check if the player has won\n    // if (currentScore === this.state.max_score) {\n    if (currentScore === 2) {\n      // this.state.game_status = 'win'\n      gameBoard.classList.add('win-game');\n    \n  }\n  }\n\n  shuffle = () => {\n\n    let array = this.state.character_array;\n\n    let currentIndex = array.length,\n      temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({\n      character_array: array\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header currentScore={ this.state.current_score } topScore={ this.state.top_score }/>\n        \n        <header className=\"App-header\">\n          <h1>Click the icons to play!</h1>\n          <p className='header-instructions'>This is a game of memorization.  The goal is to click all cards before clicking on one card twice.</p>\n        </header>\n        \n        <GameBoard characters={ this.state.character_array } handleCardClick={ this.handleCardClick }/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}